<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EKS Upgrade Assessment Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }

        .header {
            background: linear-gradient(135deg, #232f3e 0%, #131a22 100%);
            color: white;
            padding: 2rem 0;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 300;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        /* Important Notice Styles */
        .important-notice {
            background: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 8px;
            margin: 1rem auto;
            max-width: 1200px;
            box-shadow: 0 2px 8px rgba(255, 193, 7, 0.2);
        }

        .notice-content {
            padding: 1.5rem;
        }

        .notice-content h3 {
            color: #856404;
            margin-bottom: 1rem;
            font-size: 1.3rem;
            text-align: center;
        }

        .notice-text p {
            margin-bottom: 1rem;
            color: #856404;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        .notice-text p:last-child {
            margin-bottom: 0;
        }

        .notice-text strong {
            color: #721c24;
        }

        @media (max-width: 768px) {
            .important-notice {
                margin: 1rem;
                border-radius: 6px;
            }
            
            .notice-content {
                padding: 1rem;
            }
            
            .notice-content h3 {
                font-size: 1.1rem;
            }
            
            .notice-text p {
                font-size: 0.9rem;
            }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .summary-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            text-align: center;
            border-left: 4px solid #007dbc;
        }

        .summary-card h3 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: #232f3e;
        }

        .summary-card p {
            color: #666;
            font-size: 0.9rem;
        }

        .clusters-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .section-header {
            background: #232f3e;
            color: white;
            padding: 1.5rem;
            font-size: 1.3rem;
            font-weight: 500;
        }

        .clusters-table {
            width: 100%;
            border-collapse: collapse;
        }

        .clusters-table th {
            background: #f8f9fa;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #232f3e;
            border-bottom: 2px solid #dee2e6;
        }

        .cluster-row {
            cursor: pointer;
            transition: background-color 0.2s ease;
            border-bottom: 1px solid #dee2e6;
        }

        .cluster-row:hover {
            background-color: #f8f9fa;
        }

        .cluster-row.expanded {
            background-color: #e3f2fd;
        }

        .cluster-row td {
            padding: 1rem;
            vertical-align: middle;
        }

        .cluster-details {
            display: none;
            background: #f8f9fa;
            border-top: 2px solid #007dbc;
        }

        .cluster-details.show {
            display: table-row;
        }

        .details-content {
            padding: 2rem;
        }

        .details-tabs {
            display: flex;
            margin-bottom: 1.5rem;
            border-bottom: 2px solid #dee2e6;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            font-size: 1rem;
            color: #666;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
        }

        .tab-button.active {
            color: #007dbc;
            border-bottom-color: #007dbc;
            font-weight: 600;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .detail-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background: white;
            border-radius: 4px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .detail-table th {
            background: #232f3e;
            color: white;
            padding: 0.75rem;
            text-align: left;
            font-weight: 500;
        }

        .detail-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
        }

        .detail-table tr:last-child td {
            border-bottom: none;
        }

        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-ready {
            background: #d4edda;
            color: #155724;
        }

        .status-warning {
            background: #fff3cd;
            color: #856404;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
        }

        .expand-icon {
            transition: transform 0.2s ease;
            margin-right: 0.5rem;
        }

        .cluster-row.expanded .expand-icon {
            transform: rotate(90deg);
        }

        .no-data {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 2rem;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .info-item {
            background: white;
            padding: 1rem;
            border-radius: 4px;
            border-left: 3px solid #007dbc;
        }

        .info-item strong {
            display: block;
            color: #232f3e;
            margin-bottom: 0.25rem;
        }

        .close-details {
            float: right;
            background: #dc3545;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .close-details:hover {
            background: #c82333;
        }

        .api-deprecation-section, .addon-upgrade-section {
            padding: 1rem 0;
        }

        .deprecation-source, .current-addons, .upgrade-insights {
            margin-bottom: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 4px;
            border-left: 4px solid #007dbc;
        }

        .deprecation-source h5, .current-addons h5, .upgrade-insights h5 {
            margin-bottom: 1rem;
            color: #232f3e;
            font-size: 1.1rem;
        }

        .insight-card {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .insight-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #dee2e6;
        }

        .insight-body p {
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .insight-body p:last-child {
            margin-bottom: 0;
        }

        .status-deprecated {
            background: #f8d7da;
            color: #721c24;
        }

        .api-deprecation-section .detail-table th {
            background: #dc3545;
            color: white;
        }

        .addon-upgrade-section .detail-table th {
            background: #28a745;
            color: white;
        }

        .eks-insights-section, .api-scans-section {
            padding: 1rem 0;
        }

        .scan-source {
            margin-bottom: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 4px;
            border-left: 4px solid #007dbc;
        }

        .scan-source h5 {
            margin-bottom: 1rem;
            color: #232f3e;
            font-size: 1.1rem;
        }

        .scan-success {
            padding: 1rem;
            background: #d4edda;
            color: #155724;
            border-radius: 4px;
            border-left: 4px solid #28a745;
            margin: 1rem 0;
        }

        .scan-status, .scan-count {
            padding: 0.5rem;
            margin: 0.5rem 0;
            font-size: 0.9rem;
        }

        .insight-row.non-passing {
            background-color: #fff3cd;
        }

        .insight-details-row {
            background-color: #f8f9fa;
        }

        .insight-details-content {
            padding: 1.5rem;
            border-top: 2px solid #007dbc;
        }

        .insight-detailed-info {
            background: white;
            border-radius: 4px;
            padding: 1rem;
        }

        .detail-section {
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #dee2e6;
        }

        .detail-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .detail-section h6 {
            color: #232f3e;
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .recommendation-text {
            background: #e7f3ff;
            padding: 1rem;
            border-radius: 4px;
            border-left: 4px solid #007dbc;
            margin: 0;
        }

        .additional-info-list, .resources-list, .deprecation-list, .addon-compatibility-list {
            margin: 0.5rem 0;
            padding-left: 1.5rem;
        }

        .additional-info-list li, .resources-list li, .deprecation-list li, .addon-compatibility-list li {
            margin-bottom: 0.5rem;
        }

        .additional-info-list a {
            color: #007dbc;
            text-decoration: none;
        }

        .additional-info-list a:hover {
            text-decoration: underline;
        }

        .resource-item, .deprecation-item, .compatibility-item {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .resource-item:last-child, .deprecation-item:last-child, .compatibility-item:last-child {
            margin-bottom: 0;
        }

        .resource-uri, .resource-status, .resource-property {
            margin-bottom: 0.25rem;
        }

        .resource-uri:last-child, .resource-status:last-child, .resource-property:last-child {
            margin-bottom: 0;
        }

        .resource-uri {
            font-family: monospace;
            font-size: 0.9rem;
            background: #e9ecef;
            padding: 0.25rem 0.5rem;
            border-radius: 3px;
        }

        .detail-btn {
            background: #007dbc;
            color: white;
            border: none;
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .detail-btn:hover {
            background: #0056b3;
        }

        .detail-icon {
            font-size: 0.7rem;
            transition: transform 0.2s ease;
        }

        .insight-name {
            cursor: help;
            position: relative;
            border-bottom: 1px dotted #007dbc;
        }

        .insight-name:hover {
            color: #007dbc;
        }

        .insight-name[data-tooltip]:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 0;
            background: #232f3e;
            color: white;
            padding: 0.75rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: normal;
            white-space: normal;
            width: 300px;
            max-width: 300px;
            word-wrap: break-word;
            z-index: 1000;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            margin-bottom: 5px;
        }

        .insight-name[data-tooltip]:hover::before {
            content: '';
            position: absolute;
            bottom: 100%;
            left: 20px;
            border: 5px solid transparent;
            border-top-color: #232f3e;
            z-index: 1000;
        }

        .analysis-cell {
            max-width: 250px;
            word-wrap: break-word;
            font-size: 0.9rem;
        }

        .section-divider {
            margin: 2rem 0 1.5rem 0;
            padding: 1rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 8px;
            border-left: 4px solid #007dbc;
        }

        .section-divider.upgrade-section {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-left-color: #fd7e14;
        }

        .section-divider h4 {
            margin: 0;
            color: #232f3e;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .upgrade-section h4 {
            color: #856404;
        }

        .generation-info {
            background: #e7f3ff;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 2rem;
            text-align: center;
            color: #0c5460;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .summary-cards {
                grid-template-columns: 1fr;
            }
            
            .clusters-table {
                font-size: 0.9rem;
            }
            
            .details-tabs {
                flex-wrap: wrap;
            }
            
            .tab-button {
                flex: 1;
                min-width: 120px;
            }
        }

        /* Addon Compatibility Styles */
        .addon-upgrade-section {
            padding: 1rem;
        }

        .upgrade-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .version-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.1rem;
        }

        .version-label {
            color: #6c757d;
        }

        .version-arrow {
            color: #007bff;
            font-weight: bold;
            font-size: 1.2rem;
        }

        .upgrade-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9rem;
        }

        .upgrade-status.upgrade-ready {
            background: #d4edda;
            color: #155724;
        }

        .upgrade-status.upgrade-needed {
            background: #fff3cd;
            color: #856404;
        }

        .addon-summary {
            margin-bottom: 1.5rem;
        }

        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .stat-item {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            border: 2px solid #e9ecef;
        }

        .stat-item.stat-pass {
            border-color: #28a745;
        }

        .stat-item.stat-warning {
            border-color: #ffc107;
        }

        .stat-item.stat-error {
            border-color: #dc3545;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.25rem;
        }

        .stat-pass .stat-value {
            color: #28a745;
        }

        .stat-warning .stat-value {
            color: #ffc107;
        }

        .stat-error .stat-value {
            color: #dc3545;
        }

        .stat-label {
            font-size: 0.85rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .blocking-issues {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .blocking-issues h5 {
            color: #721c24;
            margin-bottom: 1rem;
        }

        .issues-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .issue-item {
            background: white;
            padding: 0.75rem;
            border-radius: 6px;
            border-left: 4px solid #dc3545;
        }

        .issue-action {
            font-size: 0.9rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }

        .addon-table-container {
            margin-top: 1.5rem;
        }

        .addon-table-container h5 {
            margin-bottom: 1rem;
            color: #495057;
        }

        .addon-compatibility-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .addon-compatibility-table th {
            background: #f8f9fa;
            padding: 1rem 0.75rem;
            text-align: left;
            font-weight: 600;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }

        .addon-compatibility-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
            vertical-align: top;
        }

        .default-version {
            background-color: #f8f9fa;
            font-weight: 500;
        }

        .default-version strong {
            color: #0066cc;
            background-color: #e3f2fd;
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-size: 0.9rem;
        }

        .issue-item {
            margin-bottom: 1rem;
            padding: 1rem;
            border: 1px solid #dc3545;
            border-radius: 8px;
            background-color: #fff5f5;
        }

        .issue-header {
            font-weight: 600;
            color: #dc3545;
            margin-bottom: 0.5rem;
        }

        .issue-details {
            margin-top: 0.5rem;
        }

        .version-info {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .version-info .current {
            color: #6c757d;
        }

        .version-info .recommended {
            color: #0066cc;
            font-weight: 500;
        }

        .version-info .recommended strong {
            background-color: #e3f2fd;
            padding: 0.1rem 0.3rem;
            border-radius: 3px;
        }

        .version-info .minimum {
            color: #dc3545;
            font-size: 0.85rem;
        }

        /* IAM Analysis Styles */
        .addon-iam-section {
            padding: 1rem;
        }

        .iam-summary {
            margin: 1rem 0;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .summary-stats {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1rem;
        }

        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            border-radius: 8px;
            min-width: 120px;
        }

        .stat-item.pass {
            background: #d4edda;
            border: 1px solid #c3e6cb;
        }

        .stat-item.warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
        }

        .stat-item.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
        }

        .stat-item.not-applicable {
            background: #e2e3e5;
            border: 1px solid #d6d8db;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            text-align: center;
            color: #6c757d;
        }

        .iam-critical-issues, .iam-warnings {
            margin: 1rem 0;
        }

        .iam-critical-issues .issue-item {
            border: 1px solid #dc3545;
            background-color: #fff5f5;
        }

        .iam-warnings .issue-item {
            border: 1px solid #ffc107;
            background-color: #fffbf0;
        }

        .addon-iam-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .addon-iam-table th {
            background: #f8f9fa;
            padding: 1rem 0.75rem;
            text-align: left;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
        }

        .addon-iam-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
            vertical-align: top;
        }

        .role-cell {
            max-width: 200px;
        }

        .role-name {
            font-weight: 500;
            color: #0066cc;
        }

        .role-arn-small {
            font-size: 0.8rem;
            color: #6c757d;
            word-break: break-all;
        }

        .policy-badge {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            margin: 0.1rem;
        }

        .policy-badge.aws-managed {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .policy-badge.custom {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .expected-policy {
            font-size: 0.9rem;
            color: #6c757d;
            margin: 0.2rem 0;
        }

        .validation-badge {
            padding: 0.3rem 0.6rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .validation-badge.pass {
            background: #d4edda;
            color: #155724;
        }

        .validation-badge.warning {
            background: #fff3cd;
            color: #856404;
        }

        .validation-badge.error {
            background: #f8d7da;
            color: #721c24;
        }

        .validation-badge.not_applicable {
            background: #e2e3e5;
            color: #6c757d;
        }

        .policy-info {
            margin-top: 0.5rem;
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 4px;
        }

        .policy-item {
            margin: 0.2rem 0;
            font-size: 0.9rem;
        }

        .policy-item.aws-managed {
            color: #155724;
        }

        .policy-item.custom {
            color: #856404;
        }

        .cluster-recommendations {
            margin-top: 1.5rem;
            padding: 1rem;
            background: #e3f2fd;
            border-radius: 8px;
        }

        .recommendations-list {
            margin: 0.5rem 0;
            padding-left: 1.5rem;
        }

        .recommendations-list li {
            margin: 0.5rem 0;
            color: #0066cc;
        }

        .table-description {
            margin-bottom: 1rem;
            color: #6c757d;
            font-style: italic;
        }

        .addon-status {
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .addon-status.active {
            background: #d4edda;
            color: #155724;
        }

        .addon-status.degraded {
            background: #fff3cd;
            color: #856404;
        }

        .addon-status.unknown {
            background: #e2e3e5;
            color: #6c757d;
        }

        .iam-required {
            font-weight: 500;
        }

        .iam-required.yes {
            color: #dc3545;
        }

        .iam-required.no {
            color: #28a745;
        }

        .iam-required.unknown {
            color: #6c757d;
        }

        .no-role, .no-policies {
            color: #6c757d;
            font-style: italic;
        }

        .validation-badge.unknown {
            background: #f8f9fa;
            color: #6c757d;
            border: 1px solid #dee2e6;
        }

        .addon-row.status-pass {
            background: #f8fff9;
        }

        .addon-row.status-warning {
            background: #fffbf0;
        }

        .addon-row.status-error {
            background: #fff5f5;
        }

        .addon-row.status-unknown {
            background: #f8f9fa;
        }

        .addon-type {
            font-size: 0.8rem;
            color: #6c757d;
            font-style: italic;
        }

        .version-cell {
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
        }

        .validation-cell {
            text-align: center;
        }

        .validation-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .validation-badge.valid {
            background: #d4edda;
            color: #155724;
        }

        .validation-badge.invalid {
            background: #f8d7da;
            color: #721c24;
        }

        .action-cell {
            max-width: 300px;
        }

        .action-text {
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
        }

        .addon-message {
            font-size: 0.8rem;
            color: #6c757d;
            font-style: italic;
        }

        .info-text {
            color: #6c757d;
            font-style: italic;
            margin-top: 0.5rem;
        }

        @media (max-width: 768px) {
            .upgrade-info {
                flex-direction: column;
                text-align: center;
            }

            .version-info {
                flex-wrap: wrap;
                justify-content: center;
            }

            .summary-stats {
                grid-template-columns: repeat(2, 1fr);
            }

            .addon-compatibility-table {
                font-size: 0.8rem;
            }

            .addon-compatibility-table th,
            .addon-compatibility-table td {
                padding: 0.5rem 0.25rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🚀 EKS Upgrade Assessment Dashboard</h1>
        <p>Interactive analysis of your EKS clusters for upgrade readiness</p>
    </div>

    <!-- Important Notice -->
    <div class="important-notice">
        <div class="notice-content">
            <h3>⚠️ 免责声明 / Disclaimer</h3>
            <div class="notice-text">
                <p><strong>中文:</strong> 本工具仅为提升工作效率而设计，虽已投入大量努力开发，但<strong>不对最终结果承担任何责任</strong>。用户在使用过程中遇到的任何问题均与工具提供方无关。请在充分理解风险的基础上使用，并以官方Kubernetes和Amazon EKS文档为准进行最终决策。</p>
                <p><strong>English:</strong> This tool is designed solely to improve work efficiency. Despite significant development efforts, <strong>we assume no responsibility for final results</strong>. Any issues encountered during usage are not the responsibility of the tool provider. Please use at your own risk and rely on official Kubernetes and Amazon EKS documentation for final decisions.</p>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="generation-info">
            <strong>Assessment Generated:</strong> {{ generation_time }}
        </div>

        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="summary-card">
                <h3 id="total-clusters">0</h3>
                <p>Total Clusters</p>
            </div>
            <div class="summary-card">
                <h3 id="ready-clusters">0</h3>
                <p>Ready for Upgrade</p>
            </div>
            <div class="summary-card">
                <h3 id="warning-clusters">0</h3>
                <p>Need Attention</p>
            </div>
            <div class="summary-card">
                <h3 id="total-node-groups">0</h3>
                <p>Total Node Groups</p>
            </div>
        </div>

        <!-- Clusters Table -->
        <div class="clusters-section">
            <div class="section-header">
                EKS Clusters Overview
            </div>
            <table class="clusters-table">
                <thead>
                    <tr>
                        <th>Cluster Name</th>
                        <th>Version</th>
                        <th>Status</th>
                        <th>Node Groups</th>
                        <th>Addons</th>
                        <th>Karpenter</th>
                        <th>Created</th>
                        <th>Platform Version</th>
                    </tr>
                </thead>
                <tbody id="clusters-tbody">
                    <!-- Cluster rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Embedded Data -->
    <script>
        // Embedded clusters metadata - no need for fetch()
        const clustersData = {{ clusters_metadata | tojson }};
        
        // Embedded assessment data - no need for fetch()
        const assessmentData = {{ assessment_data | tojson }};
        
        let expandedCluster = null;

        // Initialize dashboard when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Dashboard loaded with', Object.keys(clustersData).length, 'clusters');
            populateDashboard();
        });

        function populateDashboard() {
            updateSummaryCards();
            populateClustersTable();
        }

        function updateSummaryCards() {
            const clusters = Object.keys(clustersData);
            const totalClusters = clusters.length;
            let readyClusters = 0;
            let warningClusters = 0;
            let totalNodeGroups = 0;

            clusters.forEach(clusterName => {
                const cluster = clustersData[clusterName];
                
                // Count node groups
                if (cluster.node_groups) {
                    totalNodeGroups += cluster.node_groups.length;
                }

                // Determine cluster status (simplified logic)
                if (cluster.cluster_status === 'ACTIVE') {
                    readyClusters++;
                } else {
                    warningClusters++;
                }
            });

            document.getElementById('total-clusters').textContent = totalClusters;
            document.getElementById('ready-clusters').textContent = readyClusters;
            document.getElementById('warning-clusters').textContent = warningClusters;
            document.getElementById('total-node-groups').textContent = totalNodeGroups;
        }

        function populateClustersTable() {
            const tbody = document.getElementById('clusters-tbody');
            tbody.innerHTML = '';

            Object.keys(clustersData).forEach(clusterName => {
                const cluster = clustersData[clusterName];
                
                // Create main cluster row
                const row = document.createElement('tr');
                row.className = 'cluster-row';
                row.setAttribute('data-cluster', clusterName);
                
                const createdDate = cluster.created_at ? 
                    new Date(cluster.created_at).toLocaleDateString() : 'N/A';
                
                const nodeGroupsCount = cluster.node_groups ? cluster.node_groups.length : 0;
                const addonsCount = cluster.addons ? cluster.addons.length : 0;
                const karpenterStatus = cluster.karpenter && cluster.karpenter.installed ? 
                    `✅ ${cluster.karpenter.node_pools_count || 0} pools` : '❌ Not installed';
                
                // Derive plugin info from addons
                const pluginList = [];
                if (cluster.addons) {
                    cluster.addons.forEach(addon => {
                        const name = addon.name || '';
                        if (name.includes('load-balancer-controller') || name.toLowerCase().includes('alb')) {
                            pluginList.push('ALB');
                        } else if (name.includes('cluster-autoscaler')) {
                            pluginList.push('CA');
                        } else if (name.includes('ebs-csi')) {
                            pluginList.push('EBS');
                        } else if (name.includes('efs-csi')) {
                            pluginList.push('EFS');
                        }
                    });
                }
                const pluginsStatus = pluginList.length > 0 ? pluginList.join(', ') : 'Core only';

                row.innerHTML = `
                    <td>
                        <span class="expand-icon">▶</span>
                        <strong>${clusterName}</strong>
                    </td>
                    <td>${cluster.cluster_version || 'N/A'}</td>
                    <td>
                        <span class="status-badge ${getStatusClass(cluster.cluster_status)}">
                            ${cluster.cluster_status || 'Unknown'}
                        </span>
                    </td>
                    <td>${nodeGroupsCount}</td>
                    <td>${addonsCount}</td>
                    <td>${karpenterStatus}</td>
                    <td>${createdDate}</td>
                    <td>${cluster.platform_version || 'N/A'}</td>
                `;

                row.addEventListener('click', () => toggleClusterDetails(clusterName, row));
                tbody.appendChild(row);

                // Create details row (initially hidden)
                const detailsRow = document.createElement('tr');
                detailsRow.className = 'cluster-details';
                detailsRow.setAttribute('data-cluster-details', clusterName);
                detailsRow.innerHTML = `
                    <td colspan="8">
                        <div class="details-content">
                            <button class="close-details" onclick="closeClusterDetails('${clusterName}')">
                                ✕ Close Details
                            </button>
                            <h3>Cluster Details: ${clusterName}</h3>
                            ${generateClusterDetailsContent(cluster)}
                        </div>
                    </td>
                `;
                tbody.appendChild(detailsRow);
            });
        }

        function generateClusterDetailsContent(cluster) {
            return `
                <div class="info-grid">
                    <div class="info-item">
                        <strong>Cluster Version</strong>
                        ${cluster.cluster_version || 'N/A'}
                    </div>
                    <div class="info-item">
                        <strong>Platform Version</strong>
                        ${cluster.platform_version || 'N/A'}
                    </div>
                    <div class="info-item">
                        <strong>Status</strong>
                        <span class="status-badge ${getStatusClass(cluster.cluster_status)}">
                            ${cluster.cluster_status || 'Unknown'}
                        </span>
                    </div>
                    <div class="info-item">
                        <strong>Created</strong>
                        ${cluster.created_at ? new Date(cluster.created_at).toLocaleString() : 'N/A'}
                    </div>
                </div>

                <!-- Cluster Infrastructure Section -->
                <div class="section-divider">
                    <h4>🏗️ Cluster Infrastructure</h4>
                </div>
                <div class="details-tabs">
                    <button class="tab-button active" onclick="showTab('${cluster.cluster_name}', 'nodegroups')">
                        Node Groups (${cluster.node_groups ? cluster.node_groups.length : 0})
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'addons')">
                        EKS Addons (${cluster.addons ? cluster.addons.length : 0})
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'karpenter')">
                        Karpenter
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'fargate')">
                        Fargate (${cluster.fargate_profiles ? cluster.fargate_profiles.length : 0})
                    </button>
                </div>

                <div id="tab-${cluster.cluster_name}-nodegroups" class="tab-content active">
                    ${generateNodeGroupsTable(cluster.node_groups)}
                </div>

                <div id="tab-${cluster.cluster_name}-addons" class="tab-content">
                    ${generateAddonsTable(cluster.addons)}
                </div>

                <div id="tab-${cluster.cluster_name}-karpenter" class="tab-content">
                    ${generateKarpenterInfo(cluster.karpenter)}
                </div>

                <div id="tab-${cluster.cluster_name}-fargate" class="tab-content">
                    ${generateFargateTable(cluster.fargate_profiles)}
                </div>

                <!-- Upgrade Assessment Section -->
                <div class="section-divider upgrade-section">
                    <h4>🚀 Upgrade Assessment</h4>
                </div>
                <div class="details-tabs">
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'eks-insights')">
                        EKS Insights
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'api-scans')">
                        API Deprecation Scans
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'addon-upgrade')">
                        🔧 Addon Compatibility
                    </button>
                    <button class="tab-button" onclick="showTab('${cluster.cluster_name}', 'addon-iam')">
                        🔐 Addon IAM Analysis
                    </button>
                </div>

                <div id="tab-${cluster.cluster_name}-eks-insights" class="tab-content">
                    ${generateEksInsightsTab(cluster.cluster_name)}
                </div>

                <div id="tab-${cluster.cluster_name}-api-scans" class="tab-content">
                    ${generateApiScansTab(cluster.cluster_name)}
                </div>

                <div id="tab-${cluster.cluster_name}-addon-upgrade" class="tab-content">
                    ${generateAddonUpgradeTab(cluster.cluster_name)}
                </div>

                <div id="tab-${cluster.cluster_name}-addon-iam" class="tab-content">
                    ${generateAddonIAMTab(cluster.cluster_name)}
                </div>
            `;
        }

        function generateNodeGroupsTable(nodeGroups) {
            if (!nodeGroups || nodeGroups.length === 0) {
                return '<div class="no-data">No managed node groups found</div>';
            }

            let html = `
                <table class="detail-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Version</th>
                            <th>Capacity Type</th>
                            <th>Instance Types</th>
                            <th>AMI Type</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            nodeGroups.forEach(ng => {
                const instanceTypes = ng.instance_types ? ng.instance_types.join(', ') : 'N/A';
                html += `
                    <tr>
                        <td><strong>${ng.name}</strong></td>
                        <td>
                            <span class="status-badge ${getStatusClass(ng.status)}">
                                ${ng.status}
                            </span>
                        </td>
                        <td>${ng.version || 'N/A'}</td>
                        <td>${ng.capacity_type || 'N/A'}</td>
                        <td>${instanceTypes}</td>
                        <td>${ng.ami_type || 'N/A'}</td>
                    </tr>
                `;
            });

            html += '</tbody></table>';
            return html;
        }

        function generateAddonsTable(addons) {
            if (!addons || addons.length === 0) {
                return '<div class="no-data">No EKS addons found</div>';
            }

            let html = `
                <table class="detail-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Version</th>
                            <th>Status</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            addons.forEach(addon => {
                const addonType = ['vpc-cni', 'coredns', 'kube-proxy'].includes(addon.name) ? 'Core' : 'Additional';
                html += `
                    <tr>
                        <td><strong>${addon.name}</strong></td>
                        <td>${addon.version || 'N/A'}</td>
                        <td>
                            <span class="status-badge ${getStatusClass(addon.status)}">
                                ${addon.status}
                            </span>
                        </td>
                        <td>${addonType}</td>
                    </tr>
                `;
            });

            html += '</tbody></table>';
            return html;
        }

        function generateKarpenterInfo(karpenter) {
            if (!karpenter) {
                return '<div class="no-data">Karpenter information not available</div>';
            }

            const installed = karpenter.installed ? '✅ Installed' : '❌ Not Installed';
            const version = karpenter.version || 'N/A';
            const nodePools = karpenter.node_pools_count || 0;
            const provisioners = karpenter.provisioners_count || 0;

            return `
                <div class="info-grid">
                    <div class="info-item">
                        <strong>Installation Status</strong>
                        ${installed}
                    </div>
                    <div class="info-item">
                        <strong>Version</strong>
                        ${version}
                    </div>
                    <div class="info-item">
                        <strong>Node Pools</strong>
                        ${nodePools}
                    </div>
                    <div class="info-item">
                        <strong>Provisioners (Legacy)</strong>
                        ${provisioners}
                    </div>
                </div>
            `;
        }

        function generateFargateTable(fargateProfiles) {
            if (!fargateProfiles || fargateProfiles.length === 0) {
                return '<div class="no-data">No Fargate profiles found</div>';
            }

            let html = `
                <table class="detail-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            fargateProfiles.forEach(profile => {
                html += `
                    <tr>
                        <td><strong>${profile.name}</strong></td>
                        <td>
                            <span class="status-badge ${getStatusClass(profile.status)}">
                                ${profile.status}
                            </span>
                        </td>
                    </tr>
                `;
            });

            html += '</tbody></table>';
            return html;
        }

        function generateEksInsightsTab(clusterName) {
            const assessmentCluster = assessmentData[clusterName];
            if (!assessmentCluster || !assessmentCluster.assessment_results) {
                return '<div class="no-data">No assessment data available</div>';
            }

            const insights = assessmentCluster.assessment_results.insights || {};
            const findings = insights.findings || [];

            let html = `
                <div class="eks-insights-section">
                    <h4>📊 EKS Insights Analysis</h4>
                    <p>AWS EKS service insights for cluster upgrade readiness</p>
                    
                    <div class="info-grid">
                        <div class="info-item">
                            <strong>Total Insights</strong>
                            ${insights.count || 0}
                        </div>
                        <div class="info-item">
                            <strong>Critical Issues</strong>
                            ${insights.critical_issues || 0}
                        </div>
                        <div class="info-item">
                            <strong>Status</strong>
                            <span class="status-badge ${insights.status === 'success' ? 'status-active' : 'status-warning'}">
                                ${insights.status || 'Unknown'}
                            </span>
                        </div>
                    </div>
            `;

            if (findings.length > 0) {
                html += '<h5>📋 EKS Insights Analysis</h5>';
                html += '<table class="detail-table"><thead><tr><th>Insight</th><th>Category</th><th>Target Version</th><th>Status</th><th>Analysis</th><th>Last Updated</th><th>Actions</th></tr></thead><tbody>';
                
                findings.forEach((insight, index) => {
                    const statusClass = insight.insightStatus?.status === 'ERROR' ? 'status-error' : 
                                       insight.insightStatus?.status === 'WARNING' ? 'status-warning' : 
                                       insight.insightStatus?.status === 'UNKNOWN' ? 'status-warning' :
                                       'status-active';
                    
                    const isNonPassing = insight.insightStatus?.status !== 'PASSING';
                    const hasDetailedInfo = insight.insight && (insight.insight.recommendation || insight.insight.additionalInfo || insight.insight.resources);
                    
                    // Format last updated time
                    const lastUpdated = insight.lastRefreshTime ? 
                        new Date(insight.lastRefreshTime * 1000).toLocaleDateString() : 'N/A';
                    
                    html += `
                        <tr class="insight-row ${isNonPassing ? 'non-passing' : ''}" data-insight-index="${index}">
                            <td>
                                <strong class="insight-name" title="${insight.description || 'No description available'}" data-tooltip="${insight.description || 'No description available'}">
                                    ${insight.name || 'N/A'}
                                </strong>
                            </td>
                            <td>${insight.category || 'N/A'}</td>
                            <td>${insight.kubernetesVersion || 'N/A'}</td>
                            <td><span class="status-badge ${statusClass}">${insight.insightStatus?.status || 'Unknown'}</span></td>
                            <td class="analysis-cell">${insight.insightStatus?.reason || 'N/A'}</td>
                            <td>${lastUpdated}</td>
                            <td>
                                ${isNonPassing && hasDetailedInfo ? 
                                    `<button class="detail-btn" onclick="toggleInsightDetails('${clusterName}', ${index})">
                                        <span class="detail-icon" id="detail-icon-${index}">▶</span> Details
                                    </button>` : 
                                    '-'
                                }
                            </td>
                        </tr>
                    `;
                    
                    // Add detailed row for non-passing insights
                    if (isNonPassing && hasDetailedInfo) {
                        html += `
                            <tr class="insight-details-row" id="insight-details-${index}" style="display: none;">
                                <td colspan="7">
                                    <div class="insight-details-content">
                                        ${generateInsightDetails(insight.insight)}
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                });
                html += '</tbody></table>';
            } else {
                html += '<div class="no-data">No EKS insights available</div>';
            }

            html += '</div>';
            return html;
        }

        function generateApiScansTab(clusterName) {
            const assessmentCluster = assessmentData[clusterName];
            if (!assessmentCluster || !assessmentCluster.assessment_results) {
                return '<div class="no-data">No assessment data available</div>';
            }

            const results = assessmentCluster.assessment_results;
            let html = `
                <div class="api-scans-section">
                    <h4>🔍 API Deprecation Scans</h4>
                    <p>Kubent and Pluto scan results for deprecated Kubernetes APIs</p>
            `;

            // Kubent section
            html += '<div class="scan-source">';
            html += '<h5>🔍 Kubent Scan Results</h5>';
            html += '<p>Kubernetes deprecated API scanner - checks for deprecated APIs in cluster resources</p>';
            
            const kubent = results.deprecated_apis?.kubent || {};
            if (kubent.status === 'success') {
                if (kubent.apis && kubent.apis.length > 0) {
                    html += '<table class="detail-table"><thead><tr><th>API</th><th>Version</th><th>Kind</th><th>Deprecated In</th><th>Removed In</th><th>Resource</th></tr></thead><tbody>';
                    kubent.apis.forEach(api => {
                        html += `
                            <tr>
                                <td><strong>${api.api || 'N/A'}</strong></td>
                                <td>${api.version || 'N/A'}</td>
                                <td>${api.kind || 'N/A'}</td>
                                <td>${api.deprecated_in || 'N/A'}</td>
                                <td><span class="status-badge status-error">${api.removed_in || 'N/A'}</span></td>
                                <td>${api.resource || 'N/A'}</td>
                            </tr>
                        `;
                    });
                    html += '</tbody></table>';
                } else {
                    html += '<div class="scan-success">✅ No deprecated APIs found by Kubent scan</div>';
                }
            } else {
                html += `<div class="scan-status">Kubent scan status: <span class="status-badge ${kubent.status === 'success' ? 'status-active' : 'status-warning'}">${kubent.status || 'not run'}</span></div>`;
                if (kubent.count !== undefined) {
                    html += `<div class="scan-count">Deprecated APIs found: ${kubent.count}</div>`;
                }
            }
            html += '</div>';

            // Pluto section
            html += '<div class="scan-source">';
            html += '<h5>🛡️ Pluto Scan Results</h5>';
            html += '<p>Helm chart deprecated API scanner - checks for deprecated APIs in Helm releases</p>';
            
            const pluto = results.deprecated_apis?.pluto || {};
            if (pluto.status === 'success') {
                if (pluto.apis && pluto.apis.length > 0) {
                    html += '<table class="detail-table"><thead><tr><th>API</th><th>Version</th><th>Kind</th><th>Replacement</th><th>Removed In</th><th>Component</th></tr></thead><tbody>';
                    pluto.apis.forEach(api => {
                        html += `
                            <tr>
                                <td><strong>${api.api || 'N/A'}</strong></td>
                                <td>${api.version || 'N/A'}</td>
                                <td>${api.kind || 'N/A'}</td>
                                <td>${api.replacement || 'N/A'}</td>
                                <td><span class="status-badge status-warning">${api.removed_in || 'N/A'}</span></td>
                                <td>${api.component || 'N/A'}</td>
                            </tr>
                        `;
                    });
                    html += '</tbody></table>';
                } else {
                    html += '<div class="scan-success">✅ No deprecated APIs found by Pluto scan</div>';
                }
            } else {
                html += `<div class="scan-status">Pluto scan status: <span class="status-badge ${pluto.status === 'success' ? 'status-active' : 'status-warning'}">${pluto.status || 'not run'}</span></div>`;
                if (pluto.count !== undefined) {
                    html += `<div class="scan-count">Deprecated APIs found: ${pluto.count}</div>`;
                }
            }
            html += '</div>';

            html += '</div>';
            return html;
        }

        function generateAddonUpgradeTab(clusterName) {
            // Load addon compatibility data from addon-compatibility.json
            let addonCompatData = null;
            
            // Try to get addon compatibility data from the assessment results
            const assessmentCluster = assessmentData[clusterName];
            if (assessmentCluster && assessmentCluster.assessment_results && assessmentCluster.assessment_results.addon_compatibility) {
                addonCompatData = assessmentCluster.assessment_results.addon_compatibility;
            }
            
            if (!addonCompatData) {
                return `
                    <div class="addon-upgrade-section">
                        <h4>🔧 Addon Compatibility Analysis</h4>
                        <div class="no-data">No addon compatibility data available for this cluster</div>
                        <p class="info-text">Run the assessment with addon compatibility analysis enabled to see addon upgrade requirements.</p>
                    </div>
                `;
            }

            const currentEks = addonCompatData.current_eks_version || 'Unknown';
            const targetEks = addonCompatData.target_eks_version || 'Unknown';
            const summary = addonCompatData.summary || {};
            const addonAnalysis = addonCompatData.addon_analysis || [];
            const upgradeRequired = addonCompatData.upgrade_required || false;
            const blockingIssues = addonCompatData.blocking_issues || [];

            let html = `
                <div class="addon-upgrade-section">
                    <h4>🔧 Addon Compatibility Analysis</h4>
                    <div class="upgrade-info">
                        <div class="version-info">
                            <span class="version-label">Current EKS:</span> <strong>${currentEks}</strong>
                            <span class="version-arrow">→</span>
                            <span class="version-label">Target EKS:</span> <strong>${targetEks}</strong>
                        </div>
                        <div class="upgrade-status ${upgradeRequired ? 'upgrade-needed' : 'upgrade-ready'}">
                            ${upgradeRequired ? '⚠️ Addon upgrades required' : '✅ All addons compatible'}
                        </div>
                    </div>

                    <div class="addon-summary">
                        <div class="summary-stats">
                            <div class="stat-item">
                                <div class="stat-value">${summary.total_addons || 0}</div>
                                <div class="stat-label">Total Addons</div>
                            </div>
                            <div class="stat-item stat-pass">
                                <div class="stat-value">${summary.pass || 0}</div>
                                <div class="stat-label">Compatible</div>
                            </div>
                            <div class="stat-item stat-warning">
                                <div class="stat-value">${summary.warning || 0}</div>
                                <div class="stat-label">Warnings</div>
                            </div>
                            <div class="stat-item stat-error">
                                <div class="stat-value">${summary.error || 0}</div>
                                <div class="stat-label">Blocking</div>
                            </div>
                        </div>
                    </div>
            `;

            // Show blocking issues if any
            if (blockingIssues.length > 0) {
                html += `
                    <div class="blocking-issues">
                        <h5>🚨 Blocking Issues (Must Fix Before Upgrade)</h5>
                        <div class="issues-list">
                `;
                blockingIssues.forEach(issue => {
                    // Find the corresponding addon analysis for more details
                    const addonDetails = addonAnalysis.find(addon => addon.addon_name === issue.addon_name);
                    const targetReq = addonDetails?.target_requirements || {};
                    
                    html += `
                        <div class="issue-item">
                            <div class="issue-header">
                                <strong>${issue.addon_name}</strong>: ${issue.issue}
                            </div>
                            <div class="issue-details">
                                <div class="version-info">
                                    <span class="current">Current: ${addonDetails?.current_version || 'N/A'}</span>
                                    ${targetReq.default_version ? 
                                        `<span class="recommended">→ Recommended: <strong>${targetReq.default_version}</strong></span>` : 
                                        ''
                                    }
                                    ${targetReq.min_version ? 
                                        `<span class="minimum">Min Required: ${targetReq.min_version}</span>` : 
                                        ''
                                    }
                                </div>
                                <div class="issue-action">${issue.action_required}</div>
                            </div>
                        </div>
                    `;
                });
                html += `
                        </div>
                    </div>
                `;
            }

            // Addon compatibility table
            if (addonAnalysis.length > 0) {
                html += `
                    <div class="addon-table-container">
                        <h5>📋 Addon Compatibility Details</h5>
                        <table class="addon-compatibility-table">
                            <thead>
                                <tr>
                                    <th>Addon Name</th>
                                    <th>Current Version</th>
                                    <th>Is Valid in Target EKS</th>
                                    <th>Min Version for Target</th>
                                    <th>Max Version for Target</th>
                                    <th>Default Version for Target</th>
                                    <th>Action Required</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                addonAnalysis.forEach(addon => {
                    const targetReq = addon.target_requirements || {};
                    const isValid = addon.status === 'pass';
                    const statusClass = addon.status === 'pass' ? 'status-pass' : 
                                       addon.status === 'warning' ? 'status-warning' : 
                                       addon.status === 'error' ? 'status-error' : 'status-unknown';
                    
                    html += `
                        <tr class="addon-row ${statusClass}">
                            <td>
                                <strong>${addon.addon_name}</strong>
                                <div class="addon-type">${targetReq.addon_type || 'unknown'}</div>
                            </td>
                            <td class="version-cell">${addon.current_version || 'N/A'}</td>
                            <td class="validation-cell">
                                <span class="validation-badge ${isValid ? 'valid' : 'invalid'}">
                                    ${isValid ? '✅ Valid' : '❌ Invalid'}
                                </span>
                            </td>
                            <td class="version-cell">${targetReq.min_version || 'N/A'}</td>
                            <td class="version-cell">${targetReq.max_version || 'N/A'}</td>
                            <td class="version-cell default-version">
                                ${targetReq.default_version ? 
                                    `<strong>${targetReq.default_version}</strong>` : 
                                    'N/A'
                                }
                            </td>
                            <td class="action-cell">
                                <div class="action-text">${addon.action_required || 'No action required'}</div>
                                ${addon.message ? `<div class="addon-message">${addon.message}</div>` : ''}
                            </td>
                        </tr>
                    `;
                });

                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            } else {
                html += '<div class="no-data">No addon analysis data available</div>';
            }

            html += '</div>';
            return html;
        }

        function generateAddonIAMTab(clusterName) {
            // Load addon IAM analysis data
            let addonIAMData = null;
            
            // Try to get addon IAM data from the assessment results
            const assessmentCluster = assessmentData[clusterName];
            if (assessmentCluster && assessmentCluster.assessment_results && assessmentCluster.assessment_results.addon_iam_analysis) {
                addonIAMData = assessmentCluster.assessment_results.addon_iam_analysis;
            }
            
            // Get cluster metadata to show all addons
            const clusterMetadata = assessmentCluster?.cluster_metadata;
            const installedAddons = clusterMetadata?.addons || [];
            
            let html = `
                <div class="addon-iam-section">
                    <h4>🔐 Addon IAM Role and Policy Analysis</h4>
                    <div class="iam-info">
                        <div class="summary-info">
                            <p>This analysis verifies whether EKS addons are using AWS managed IAM policies or custom policies that require manual verification.</p>
                            <p><strong>Key:</strong> ✅ Pass = Using AWS managed policies | ⚠️ Warning = Custom policies need verification | ❌ Error = Missing required policies | ℹ️ N/A = No IAM required</p>
                        </div>
                    </div>
            `;
            
            if (!addonIAMData) {
                html += `
                    <div class="no-data">
                        <h5>⚠️ No IAM Analysis Data Available</h5>
                        <p>IAM analysis data is not available for this cluster. This could be due to:</p>
                        <ul>
                            <li>Analysis was run before IAM analysis feature was implemented</li>
                            <li>IAM analysis failed during assessment</li>
                            <li>Insufficient permissions to analyze IAM roles</li>
                        </ul>
                        <p><strong>Recommendation:</strong> Re-run the assessment to generate IAM analysis data.</p>
                    </div>
                `;
            } else {
                const addonAnalysis = addonIAMData.addon_iam_analysis || [];
                const summary = addonIAMData.summary || {};
                const recommendations = addonIAMData.recommendations || [];
                
                // Summary statistics
                html += `
                    <div class="iam-summary">
                        <h5>📊 IAM Analysis Summary</h5>
                        <div class="summary-stats">
                            <div class="stat-item pass">
                                <span class="stat-number">${summary.pass || 0}</span>
                                <span class="stat-label">Using AWS Managed Policies</span>
                            </div>
                            <div class="stat-item warning">
                                <span class="stat-number">${summary.warning || 0}</span>
                                <span class="stat-label">Need Verification</span>
                            </div>
                            <div class="stat-item error">
                                <span class="stat-number">${summary.error || 0}</span>
                                <span class="stat-label">Configuration Errors</span>
                            </div>
                            <div class="stat-item not-applicable">
                                <span class="stat-number">${summary.not_applicable || 0}</span>
                                <span class="stat-label">No IAM Required</span>
                            </div>
                        </div>
                    </div>
                `;
                
                // Show critical issues if any
                const errorAddons = addonAnalysis.filter(addon => addon.validation_status === 'error');
                if (errorAddons.length > 0) {
                    html += `
                        <div class="iam-critical-issues">
                            <h5>🚨 Critical IAM Issues (Must Fix Before Upgrade)</h5>
                            <div class="issues-list">
                    `;
                    errorAddons.forEach(addon => {
                        html += `
                            <div class="issue-item error">
                                <div class="issue-header">
                                    <strong>${addon.addon_name}</strong>
                                </div>
                                <div class="issue-details">
                                    ${addon.issues.map(issue => `<div class="issue-text">❌ ${issue}</div>`).join('')}
                                    ${addon.recommendations.map(rec => `<div class="recommendation-text">💡 ${rec}</div>`).join('')}
                                </div>
                            </div>
                        `;
                    });
                    html += `
                            </div>
                        </div>
                    `;
                }
                
                // Show warnings if any
                const warningAddons = addonAnalysis.filter(addon => addon.validation_status === 'warning');
                if (warningAddons.length > 0) {
                    html += `
                        <div class="iam-warnings">
                            <h5>⚠️ IAM Configuration Warnings (Verify Manually)</h5>
                            <div class="warnings-list">
                    `;
                    warningAddons.forEach(addon => {
                        html += `
                            <div class="issue-item warning">
                                <div class="issue-header">
                                    <strong>${addon.addon_name}</strong>
                                    ${addon.service_account_role_arn ? 
                                        `<div class="role-arn">Role: ${addon.service_account_role_arn}</div>` : 
                                        ''
                                    }
                                </div>
                                <div class="issue-details">
                                    ${addon.issues.map(issue => `<div class="issue-text">⚠️ ${issue}</div>`).join('')}
                                    ${addon.recommendations.map(rec => `<div class="recommendation-text">💡 ${rec}</div>`).join('')}
                                </div>
                            </div>
                        `;
                    });
                    html += `
                            </div>
                        </div>
                    `;
                }
            }
            
            // Comprehensive addon table - show ALL installed addons
            if (installedAddons.length > 0) {
                html += `
                    <div class="iam-table-container">
                        <h5>📋 Complete Addon IAM Analysis</h5>
                        <p class="table-description">All addons installed in this cluster and their IAM policy status:</p>
                        <table class="addon-iam-table">
                            <thead>
                                <tr>
                                    <th>Addon Name</th>
                                    <th>Version</th>
                                    <th>Status</th>
                                    <th>IAM Required</th>
                                    <th>IAM Role</th>
                                    <th>Policy Status</th>
                                    <th>Validation Result</th>
                                    <th>Action Required</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                installedAddons.forEach(installedAddon => {
                    // Find corresponding IAM analysis
                    const iamAnalysis = addonIAMData ? 
                        addonIAMData.addon_iam_analysis?.find(a => a.addon_name === installedAddon.name) : 
                        null;
                    
                    const statusClass = iamAnalysis ? 
                        (iamAnalysis.validation_status === 'pass' ? 'status-pass' : 
                         iamAnalysis.validation_status === 'warning' ? 'status-warning' : 
                         iamAnalysis.validation_status === 'error' ? 'status-error' : 'status-not-applicable') :
                        'status-unknown';
                    
                    const statusIcon = iamAnalysis ? 
                        (iamAnalysis.validation_status === 'pass' ? '✅' : 
                         iamAnalysis.validation_status === 'warning' ? '⚠️' : 
                         iamAnalysis.validation_status === 'error' ? '❌' : 'ℹ️') :
                        '❓';
                    
                    const iamRequired = iamAnalysis ? 
                        (iamAnalysis.expected_managed_policies?.length > 0 ? 'Yes' : 'No') :
                        'Unknown';
                    
                    html += `
                        <tr class="iam-row ${statusClass}">
                            <td>
                                <strong>${installedAddon.name}</strong>
                            </td>
                            <td class="version-cell">${installedAddon.version || 'N/A'}</td>
                            <td class="status-cell">
                                <span class="addon-status ${installedAddon.status?.toLowerCase() || 'unknown'}">
                                    ${installedAddon.status || 'Unknown'}
                                </span>
                            </td>
                            <td class="iam-required-cell">
                                <span class="iam-required ${iamRequired.toLowerCase()}">
                                    ${iamRequired}
                                </span>
                            </td>
                            <td class="role-cell">
                                ${iamAnalysis?.service_account_role_arn ? 
                                    `<div class="role-name">${iamAnalysis.service_account_role_arn.split('/').pop()}</div>
                                     <div class="role-arn-small">${iamAnalysis.service_account_role_arn}</div>` : 
                                    '<span class="no-role">No IAM Role</span>'
                                }
                            </td>
                            <td class="policy-status-cell">
                                ${iamAnalysis?.iam_role_info?.attached_policies ? 
                                    iamAnalysis.iam_role_info.attached_policies.map(policy => 
                                        `<div class="policy-badge ${policy.is_aws_managed ? 'aws-managed' : 'custom'}">
                                            ${policy.is_aws_managed ? '🔒 AWS Managed' : '⚙️ Custom'}
                                        </div>`
                                    ).join('') : 
                                    '<span class="no-policies">N/A</span>'
                                }
                            </td>
                            <td class="validation-cell">
                                <span class="validation-badge ${iamAnalysis?.validation_status || 'unknown'}">
                                    ${statusIcon} ${iamAnalysis?.validation_status ? 
                                        iamAnalysis.validation_status.replace('_', ' ').toUpperCase() : 
                                        'NOT ANALYZED'
                                    }
                                </span>
                            </td>
                            <td class="action-cell">
                                ${iamAnalysis?.issues?.length > 0 ? 
                                    iamAnalysis.issues.map(issue => `<div class="issue-text">${issue}</div>`).join('') : 
                                    (iamAnalysis ? 'No action required' : 'Run IAM analysis')
                                }
                                ${iamAnalysis?.recommendations?.length > 0 ? 
                                    iamAnalysis.recommendations.map(rec => `<div class="recommendation-text">${rec}</div>`).join('') : 
                                    ''
                                }
                            </td>
                        </tr>
                    `;
                });

                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            } else {
                html += '<div class="no-data">No addons found in this cluster</div>';
            }
            
            // Cluster-level recommendations
            if (addonIAMData?.recommendations?.length > 0) {
                html += `
                    <div class="cluster-recommendations">
                        <h5>💡 Cluster-Level Recommendations</h5>
                        <ul class="recommendations-list">
                            ${addonIAMData.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                        </ul>
                    </div>
                `;
            }

            html += '</div>';
            return html;
        }

        function toggleClusterDetails(clusterName, row) {
            const detailsRow = document.querySelector(`[data-cluster-details="${clusterName}"]`);
            
            // Close any currently expanded cluster
            if (expandedCluster && expandedCluster !== clusterName) {
                closeClusterDetails(expandedCluster);
            }

            if (detailsRow.classList.contains('show')) {
                // Close this cluster
                closeClusterDetails(clusterName);
            } else {
                // Open this cluster
                row.classList.add('expanded');
                detailsRow.classList.add('show');
                expandedCluster = clusterName;
            }
        }

        function closeClusterDetails(clusterName) {
            const row = document.querySelector(`[data-cluster="${clusterName}"]`);
            const detailsRow = document.querySelector(`[data-cluster-details="${clusterName}"]`);
            
            if (row) row.classList.remove('expanded');
            if (detailsRow) detailsRow.classList.remove('show');
            
            if (expandedCluster === clusterName) {
                expandedCluster = null;
            }
        }

        function showTab(clusterName, tabName) {
            // Hide all tab contents for this cluster
            const tabContents = document.querySelectorAll(`[id^="tab-${clusterName}-"]`);
            tabContents.forEach(content => content.classList.remove('active'));

            // Remove active class from all tab buttons for this cluster
            const tabButtons = document.querySelectorAll(`[onclick*="${clusterName}"]`);
            tabButtons.forEach(button => button.classList.remove('active'));

            // Show selected tab content
            const selectedTab = document.getElementById(`tab-${clusterName}-${tabName}`);
            if (selectedTab) selectedTab.classList.add('active');

            // Add active class to clicked button
            event.target.classList.add('active');
        }

        function getStatusClass(status) {
            if (!status) return '';
            
            const statusLower = status.toLowerCase();
            if (statusLower === 'active' || statusLower === 'ready') return 'status-active';
            if (statusLower.includes('warning') || statusLower.includes('updating')) return 'status-warning';
            if (statusLower.includes('error') || statusLower.includes('failed')) return 'status-error';
            return 'status-active';
        }

        function generateInsightDetails(insightData) {
            if (!insightData) return '<div class="no-data">No detailed information available</div>';
            
            let html = '<div class="insight-detailed-info">';
            
            // Recommendation section
            if (insightData.recommendation) {
                html += `
                    <div class="detail-section">
                        <h6>💡 Recommendation</h6>
                        <p class="recommendation-text">${insightData.recommendation}</p>
                    </div>
                `;
            }
            
            // Additional Info section
            if (insightData.additionalInfo && Object.keys(insightData.additionalInfo).length > 0) {
                html += `
                    <div class="detail-section">
                        <h6>📚 Additional Information</h6>
                        <ul class="additional-info-list">
                `;
                
                Object.entries(insightData.additionalInfo).forEach(([key, value]) => {
                    if (value && value.startsWith('http')) {
                        html += `<li><strong>${key}:</strong> <a href="${value}" target="_blank" rel="noopener">${value}</a></li>`;
                    } else {
                        html += `<li><strong>${key}:</strong> ${value}</li>`;
                    }
                });
                
                html += '</ul></div>';
            }
            
            // Resources section
            if (insightData.resources && insightData.resources.length > 0) {
                html += `
                    <div class="detail-section">
                        <h6>🔧 Affected Resources</h6>
                        <div class="resources-list">
                `;
                
                insightData.resources.forEach(resource => {
                    if (typeof resource === 'object') {
                        // Handle resource objects
                        html += '<div class="resource-item">';
                        
                        if (resource.kubernetesResourceUri) {
                            html += `<div class="resource-uri"><strong>Resource:</strong> ${resource.kubernetesResourceUri}</div>`;
                        }
                        
                        if (resource.insightStatus) {
                            const statusClass = resource.insightStatus.status === 'ERROR' ? 'status-error' : 
                                               resource.insightStatus.status === 'WARNING' ? 'status-warning' : 'status-active';
                            html += `<div class="resource-status"><strong>Status:</strong> <span class="status-badge ${statusClass}">${resource.insightStatus.status}</span></div>`;
                        }
                        
                        // Display any other properties
                        Object.keys(resource).forEach(key => {
                            if (key !== 'kubernetesResourceUri' && key !== 'insightStatus') {
                                html += `<div class="resource-property"><strong>${key}:</strong> ${resource[key]}</div>`;
                            }
                        });
                        
                        html += '</div>';
                    } else {
                        // Handle string resources
                        html += `<div class="resource-item">${resource}</div>`;
                    }
                });
                
                html += '</div></div>';
            }
            
            // Category Specific Summary
            if (insightData.categorySpecificSummary) {
                const summary = insightData.categorySpecificSummary;
                
                if (summary.deprecationDetails && summary.deprecationDetails.length > 0) {
                    html += `
                        <div class="detail-section">
                            <h6>⚠️ Deprecation Details</h6>
                            <div class="deprecation-list">
                    `;
                    summary.deprecationDetails.forEach(detail => {
                        if (typeof detail === 'object') {
                            html += '<div class="deprecation-item">';
                            Object.keys(detail).forEach(key => {
                                html += `<div><strong>${key}:</strong> ${detail[key]}</div>`;
                            });
                            html += '</div>';
                        } else {
                            html += `<div class="deprecation-item">${detail}</div>`;
                        }
                    });
                    html += '</div></div>';
                }
                
                if (summary.addonCompatibilityDetails && summary.addonCompatibilityDetails.length > 0) {
                    html += `
                        <div class="detail-section">
                            <h6>🔌 Addon Compatibility Details</h6>
                            <div class="addon-compatibility-list">
                    `;
                    summary.addonCompatibilityDetails.forEach(detail => {
                        if (typeof detail === 'object') {
                            html += '<div class="compatibility-item">';
                            Object.keys(detail).forEach(key => {
                                html += `<div><strong>${key}:</strong> ${detail[key]}</div>`;
                            });
                            html += '</div>';
                        } else {
                            html += `<div class="compatibility-item">${detail}</div>`;
                        }
                    });
                    html += '</div></div>';
                }
            }
            
            html += '</div>';
            return html;
        }

        function toggleInsightDetails(clusterName, insightIndex) {
            const detailsRow = document.getElementById(`insight-details-${insightIndex}`);
            const icon = document.getElementById(`detail-icon-${insightIndex}`);
            
            if (detailsRow.style.display === 'none') {
                detailsRow.style.display = 'table-row';
                icon.textContent = '▼';
            } else {
                detailsRow.style.display = 'none';
                icon.textContent = '▶';
            }
        }
    </script>
</body>
</html>
